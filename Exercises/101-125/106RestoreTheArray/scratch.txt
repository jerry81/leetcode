

Input: s = "1000", k = 10000
Output: 1
Explanation: The only possible array is [1000]
b/c - if you take any other number

10, 100, the other 0's will be illegal


Example 2:

Input: s = "1000", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.
Example 3:

b/c 1000 is illegal and same rules as above

Input: s = "1317", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]

order stays
"pick or skip"
at each index 1 to n-1

1,3,1,7


3 choices
     idx 0,1,2

               1, 317                                 1317   idx 0
      1,3, 17            1,317               13, 17                   1317  idx 1
1,3,1,7     1,3,17   1,31,7  1,317      13,1,7     13,17         131,7    1317    idx 2

               curidx, substr start?
                 0,1,0                               0,0,0
        1,2,1             1,1,1             1,1 0         1,0,0
  2,3,2     2,2,2     2,2,1   2,1,1       2


curidx, substart, subend

// if k == 12, then 1,3,17 is not acceptable but 1,3,1,7 is acceptable
// but we can iteratively just "split" the suffix
// how to represent the states for memoization
// just the binary string
// the value at the key?
// pair (bool, "last suffix")

                0, 317                                 0, 1317
        1, 17           1, 317                 1, 17 (need to check prefix)              1, 1317


example 2 1000
       1,000 false <-- so are all subtrees false?           1000


