/*


3270. Find the Key of the Numbers
Easy
Topics
Companies
You are given three positive integers num1, num2, and num3.

The key of num1, num2, and num3 is defined as a four-digit number such that:

Initially, if any number has less than four digits, it is padded with leading zeros.
The ith digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the ith digits of num1, num2, and num3.
Return the key of the three numbers without leading zeros (if any).



Example 1:

Input: num1 = 1, num2 = 10, num3 = 1000

Output: 0

Explanation:

On padding, num1 becomes "0001", num2 becomes "0010", and num3 remains "1000".

The 1st digit of the key is min(0, 0, 1).
The 2nd digit of the key is min(0, 0, 0).
The 3rd digit of the key is min(0, 1, 0).
The 4th digit of the key is min(1, 0, 0).
Hence, the key is "0000", i.e. 0.

Example 2:

Input: num1 = 987, num2 = 879, num3 = 798

Output: 777

Example 3:

Input: num1 = 1, num2 = 2, num3 = 3

Output: 1



Constraints:

1 <= num1, num2, num3 <= 9999
Seen this question in a real interview before?
1/5
Yes
No
Accepted
33.3K
Submissions
43.8K
Acceptance Rate
76.1%

*/

impl Solution {
  pub fn generate_key(num1: i32, num2: i32, num3: i32) -> i32 {
    let mut v: Vec<char> = vec!['9','9','9','9'];
    let (num1str, num2str, num3str) = (num1.to_string(), num2.to_string(), num3.to_string());
    // pad zeroes
    let mut num1v = num1str.chars().collect::<Vec<_>>();
    let mut num2v = num2str.chars().collect::<Vec<_>>();
    let mut num3v = num3str.chars().collect::<Vec<_>>();
    while (num1v.len() < 4) {
      num1v.push_front('0');
    }
    while (num2v.len() < 4) {
      num2v.push_front('0');
    }
    while (num3v.len() < 4) {
      num3v.push_front('0');
    }

    v.iter().collect::<String>().parse::<i32>().unwrap()
  }
}