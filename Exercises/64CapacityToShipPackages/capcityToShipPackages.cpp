/*

1011. Capacity To Ship Packages Within D Days
Medium
6K
123
Companies
A conveyor belt has packages that must be shipped from one port to another
within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we
load the ship with packages on the conveyor belt (in the order given by
weights). We may not load more weight than the maximum weight capacity of the
ship.

Return the least weight capacity of the ship that will result in all the
packages on the conveyor belt being shipped within days days.



Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5
days like this: 1st day: 1, 2, 3, 4, 5 2nd day: 6, 7 3rd day: 8 4th day: 9 5th
day: 10

Note that the cargo must be shipped in the order given, so using a ship of
capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7),
(8), (9), (10) is not allowed. Example 2:

Input: weights = [3,2,2,4,1,4], days = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3
days like this: 1st day: 3, 2 2nd day: 2, 4 3rd day: 1, 4 Example 3:

Input: weights = [1,2,3,1,1], days = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1


Constraints:

1 <= days <= weights.length <= 5 * 104
1 <= weights[i] <= 500
Accepted
198.8K
Submissions
304.8K
Acceptance Rate
65.2%

*/

#include <iostream>
#include <vector>

using namespace std;

struct Bucket {
  int total = 0;
  vector<int> items;
};
class Solution {
 int totalOf(vector<int> weights) {
   int sum = 0;
   for (int w:weights) {
     sum+=w;
   }
   return sum;
 };

 public:
  int shipWithinDays(vector<int>& weights, int days) {
    if (days == 1) return totalOf(weights);
    int max = 0;
    for (int weight : weights) {
      if (weight > max) max = weight;
    }
    int size = 0;
    while (true) {
      int i = 0;
      vector<Bucket> buckets;
      bool newBucket = true;
      while (i < weights.size()) {
        int cur = weights[i];
        if (newBucket || (buckets[buckets.size() - 1].total + cur) > max) {
          Bucket b;
          b.total += cur;
          b.items.push_back(cur);
          newBucket = false;
          buckets.push_back(b);
        } else {
          buckets[buckets.size() - 1].total += cur;
          buckets[buckets.size() - 1].items.push_back(cur);
        }
        ++i;
      }
      size = buckets.size();
      if (size <= days) {
          return max;
      }
      max++;
    }

    return max;
  }
};

int main() {
  vector<int> test1 = {395,486,340,139,475,419,108,252,174,77,358,197,160,311,41,70,11,446,317,335,459,284,73,140,194,285,32,373,145,209,485,146,365,295,303,409,100,61,161,367,481,425,450,351,219,62,226,368,175,342,224,465,266,69,6,288,128,476,112,68,31,11,206,109,192,302,365,156,56,89,490,349,185,8,359,343,495,8,483,151,464,284,398,98,500,201,3,214,446,402,365,341,77,408,255,430,3,251,252,254,441,492,231,348,289,373,64,370,355,20,341,190,209,56,413,201,135,471,49,151,232,434,254,245,199,480,356,314,142,315,15,330,146,437,469,138,281,468,405,470,103,135,22,246,46,487,156,334,15,7,298,74,386,20,227,210,85,465,446,3,25,88,182,432,496,324,410,30,214,249,2,333,428,27,376,397,232,204,84,177,330,249,452,363,152,276,13,54,236,117,248,303,313,221,130,105,114,9,132,113,114,25,144,318,49,258,182,62,97,195,132,239,486,1,455,207,55,323,50,273,91,443,130,157,361,499,485,220,319,325,83,177,143,227,209,26,278,199,397,81,215,244,75,91,54,428,381,200,378,456,360,85,362,151,53,153,105,467,341,301,10,35,165,72,101,255,276,55,487,463,135,450,310,452,56,153,114,77,128,332,270,283,487,132,5,458,232,260,441,274,490,96,156,171,132,297,178,161,42,395,148,44,310,222,288,194,152,414,251,152,387,3,349,269,173,145,469,71,363,412,414,39,10,422,203,121,215,97,112,70,496,225,490,292,153,256,299,498,157,500,308,233,18,163,257,149,336,264,384,18,266,380,15,3,411,233,414,246,6,290,266,173,351,190,100,450,113,288,306,197,406,289,473,117,493,206,349,31,171,274,85,443,381,461,100,468,372,324,433,216,122,262,436,310,358,304,186,15,116,374,81,469,211,436,462,419,201,235,265,367,382,285,85,442,249,96,1,64,129,400,44,465,498,96,494,473,138,285,141,93,104,35,445,384,420,82,264,447,37,390,266,393,33,423,398,172,197,250,251,134,339,442,56,361,358,128,441,163,117,360,323,58,264,326,29,469,410,302,401,318,445,331,287,422,177,224,470,260,261,230,393,402,277,263,368,134,242,439,20,443,177,494,478,54,113,183,41,461,120,300,239,303,101,455,488,405,493,122,268,142,306,124,479,233,415,294,176,206,371,456,87,309,293,345,70,343,77,22,273,110,250,456,182,137,62,5,485,126,101,171,349,123,295,105,462,98,481,472,428,268,320,387,139,449,414,59,249,251,202,324,121,122,264,350,428,75,103,229,235,282,330,62,38,482,136,28,180,409};
  int testdays1 = 17;
  Solution s;
  cerr << "expect something in reasonable time " << s.shipWithinDays(test1, testdays1) << endl;;
}

// start with max weight
// if there are not enough days
// increment max weight
// then brute force build containers?
// if over days then split containers

/*

weights =
[395,486,340,139,475,419,108,252,174,77,358,197,160,311,41,70,11,446,317,335,459,284,73,140,194,285,32,373,145,209,485,146,365,295,303,409,100,61,161,367,481,425,450,351,219,62,226,368,175,342,224,465,266,69,6,288,128,476,112,68,31,11,206,109,192,302,365,156,56,89,490,349,185,8,359,343,495,8,483,151,464,284,398,98,500,201,3,214,446,402,365,341,77,408,255,430,3,251,252,254,441,492,231,348,289,373,64,370,355,20,341,190,209,56,413,201,135,471,49,151,232,434,254,245,199,480,356,314,142,315,15,330,146,437,469,138,281,468,405,470,103,135,22,246,46,487,156,334,15,7,298,74,386,20,227,210,85,465,446,3,25,88,182,432,496,324,410,30,214,249,2,333,428,27,376,397,232,204,84,177,330,249,452,363,152,276,13,54,236,117,248,303,313,221,130,105,114,9,132,113,114,25,144,318,49,258,182,62,97,195,132,239,486,1,455,207,55,323,50,273,91,443,130,157,361,499,485,220,319,325,83,177,143,227,209,26,278,199,397,81,215,244,75,91,54,428,381,200,378,456,360,85,362,151,53,153,105,467,341,301,10,35,165,72,101,255,276,55,487,463,135,450,310,452,56,153,114,77,128,332,270,283,487,132,5,458,232,260,441,274,490,96,156,171,132,297,178,161,42,395,148,44,310,222,288,194,152,414,251,152,387,3,349,269,173,145,469,71,363,412,414,39,10,422,203,121,215,97,112,70,496,225,490,292,153,256,299,498,157,500,308,233,18,163,257,149,336,264,384,18,266,380,15,3,411,233,414,246,6,290,266,173,351,190,100,450,113,288,306,197,406,289,473,117,493,206,349,31,171,274,85,443,381,461,100,468,372,324,433,216,122,262,436,310,358,304,186,15,116,374,81,469,211,436,462,419,201,235,265,367,382,285,85,442,249,96,1,64,129,400,44,465,498,96,494,473,138,285,141,93,104,35,445,384,420,82,264,447,37,390,266,393,33,423,398,172,197,250,251,134,339,442,56,361,358,128,441,163,117,360,323,58,264,326,29,469,410,302,401,318,445,331,287,422,177,224,470,260,261,230,393,402,277,263,368,134,242,439,20,443,177,494,478,54,113,183,41,461,120,300,239,303,101,455,488,405,493,122,268,142,306,124,479,233,415,294,176,206,371,456,87,309,293,345,70,343,77,22,273,110,250,456,182,137,62,5,485,126,101,171,349,123,295,105,462,98,481,472,428,268,320,387,139,449,414,59,249,251,202,324,121,122,264,350,428,75,103,229,235,282,330,62,38,482,136,28,180,409]
days =
17

*/